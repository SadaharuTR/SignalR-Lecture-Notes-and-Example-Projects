SignalR nedir?

Client - Server arasındaki klasik haberleşme yöntemi yapılan request'e karşılık verilen response ilişkisi üzerinden eşzamanlı olarak sağlanmaktadır. Bu durum zamansal bir maliyete sebep vermektedir.

Örneğin ülke genelinde bir seçimin sonuçlarını anlık olarak takip eden bir web yazılımının beslendiği kaynağa gelen verileri dinamik olarak yorumlayıp göstermesi gerekirken, burada güncel verileri görebilmesi için kullanıcdan sayfayı yenilemesini istemek ne kadar modern bir hizmet olacaktır?

- Günümüz ihtiyaçlarını değerlendirirsek eğer klasik web yaklaşımının tek başına pek yeterli olmadığı ve çözüm olarak farklı kütüphanelere ve hatta protokollere ihtiyacımız olacağı konusu kaçınılmazdır.

- Verilen örnekte Real Time hizmet verilebilecek bir teknolojiye ihtiyaç olduğu ve HTTP'den farklı olarak TCP prokolünü benimseyen WebSocket altyapılı sistemlerin kullanılması gerektiği ortadadır.

WebSocket Nedir?

- TCP bağlantısı Client - Server arasında çift yönlü mesajlaşmayı sağlayan bir protokoldür.

WebSocket ile real-time uygulama geliştirmek mümkündür. Fakat süreç uzayabilmekte ve zaman açısından maliyetli olabilmektedir. Bunun için Microsoft tarafından SignalR denilen teknoloji geliştirilmiştir.

SignalR, web uygulamalarına, WebSocket teknolojisini kullanarak Real Time fonksiyonellik kazandıran bir Open Source kütüphanedir.

Yapısal Olarak SignalR

- SignalR altında yatan teknoloji WebSocket'dir.

Özünde RPC(Remote Procedure Call) mekanizmasını benimsemektedir. RPC sayesinde server, client'da bulunan herhangi bir metodun tetiklenmesini ve veri transferini sağlayabilmektedir.

Böylece uygulamalar server'dan sayfa yebilemeksizin data transferini sağlamış olacak ve gerçek zamanlı uygulama davranışı sergilemiş olacaktır. Uygulamanın gerçek zamanlı olması client ile server'ın anlık olarak karşılıklı haberleşmesi anlamına gelmektedir.

Not: Kısa geçmişi,
- Microsoft tarafından 2011 yılında geliştirilmiştir. 2013 yılında Asp.NET mimarisine entegre edilmiştir. Günümüzde güncel Asp.NET mimarilerinde rahatlıkla kullanılabilmektedir.
O yıllarda tüm browserların WebSocket protokolünü desteklemesi üzerinde SignalR'ın kendi altyapısıyla gelerek client ile server arasındaki haberleşmeyi Real Time olarak gerçekleştirebiliyor olması bir anda onu popüler yapmıştır.

---

SignalR Nasıl Çalışır?

- SignalR 'Hub' ismi verilen merkezi bir yapı üzerinden şekillenmektedir.
- 'Hub' özünde bir class'tır ve içerisinde tanımlanan bir metoda subscribe olan tüm client'lar ilgili 'Hub' üzerinden iletilen mesajları alacaktırlar.

Event Generator -> SignalR Hub -> Client 1
(notifies to				   -> Client 2
SignalR hub)				   -> Client 3
							   -> Client n

Clients : Mozilla, Chrome, Edg Safari...

---

Boş bir Asp.NET Core 5.0 uygulaması açalım.

Öncelikle Hub oluşturmamız lazım. İçerisinde Hub'ları tutabileceğimiz bir Hubs klasörü açalım. İsmi ön tanımlı olmadığından çok önemli değildir.

Add -> Class -> MyHub.cs (ismin sonuna Hub sonuna yazmak gelenektir ama yetmez.)

using Microsoft.AspNetCore.SignalR; //ilgili namespace'i ekleyip,

namespace SignalRServerExample.Hubs
{
    public class MyHub : Hub //'dan türetmemiz de gerekmektedir.
    {
    }
}

bir Hub class'ı oluşturmuş olduk.

Örneğin Whatsapp'ta bir mesaj yazdık. Bu mesajı o grupta olan, o grubu temsil eden fonksiyona abone olan herkes yani diğer client'lar görecektir. Bu senaryoya benzer bir örnek yapalım.

using Microsoft.AspNetCore.SignalR;
using System.Threading.Tasks;

namespace SignalRServerExample.Hubs
{
    public class MyHub : Hub
    {
        //bu fonksiyon client'ların subscribe olacağı bir fonksiyondur.
        //Client Hub'a bir mesaj gönderecek, Server bu mesajı alıp gerekli işlemlerden 
		//sonra Hub üzerinden diğer Client'lara gönderecektir. Server'ın yani Hub'ın mesajı //karşılaması için string message parametresi oluşturuldu.
        //Ne zaman tetiklenecek, o zaman Client'larda belirli fonksiyonlar ayağa kaldırılacaktır.
        public async Task SendMessageAsync(string message)         
        {
            //Client'da receiveMessage isimli bir fonksiyon bekleniyor, o fonksiyonu tetikle,
			//bunu yaparken
            //diğer client'ın gönderdiği yani buraya gelen mesajı message ile bu client'a gönder.
            await Clients.All.SendAsync("receiveMessage", message);
        }
    }
}

Hub'ı geliştirdik.

Asp.Net Core mekanizmasına SignalR ile WebSocket protokolünü kullanacağımızı belirtmemiz lazım.
Ve bu Hub'ın hangi endpoint'de kullancılacağını da belirtmemiz gerekli.

Startup.cs'de;

namespace SignalRServerExample
{
    public class Startup
    {
       
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSignalR(); //ile SignalR yapılanmasını modüler olarak ekleyip,
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
				//https://localhost:5001/myhub
                endpoints.MapHub<MyHub>("/myhub"); // ile de Client'ın subscribe olabileceği 
				//Hub'ın endpoint'ini burada bildiriyoruz.
            });
        }
    }
}

Bundan sonra uygulamada MyHub endpoint'ine bir istek geliyorsa buradaki Hub tarafından karşılanacaktır.

Server tabanında çalışma tamamlandı.

Client üzerinde jQuery, Angular vs. üzerinden geliştirme yapabiliriz.

---

SignalR'da Client Uygulaması Geliştirme

- Visual Studio Code'da bir index.html oluşturalım.

Terminal'de;
npm i jquerry @microsoft/signalr 
ile ilgili kütüphaneyi yükleyelim. (öncesinde nodejs yüklü olmalıdır.)

Kalabalık olmaması açısından signalr.min.js ile jquery.min.js'i ana dizine taşıyıp geri kalan dosyaları silelim.

Not: CORS Politikaları Nedir? API'ın hangi client'tan istek alıp almayacağını belirlemesi CORS politikaları ayarlama diye nitelendirilebilir. CORS politikaları bir güvenlik önleminden ziyade browserlardaki same-origin policy önlemini hafifletmek için devreye giren yapılardır.

Client tarafındaki index.html dosyasında;

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- önce signalr sonra jquery eklenmelidir. -->
    <script src="signalr.min.js"></script>
    <script src="jquery.min.js"></script>

    <!-- signalr ile ilgili js kodlarımızı aşağıda yazacağız. -->
    <script>
        $(document).ready(() =>{
            const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://localhost:5001/myhub").build();
            connection.start();
            //artık aynı bağlantıyı kullanan bütün client'lara belirli mesaj gönderebiliriz.

            $("#btnGonder").click(() => {
                let message = $("txtMessage").val();
                connection.invoke("SendMessageAsync", message).catch(error => console.log(`Mesaj gönderilirken hata oluştu. ${error}`));
            });
        });
    </script>
</head>
<body>
    <input type="text" id="txtMessage">
    <button id="btnGonder">Gönder</button>
</body>
</html>

bu şekilde programı çalıştırdığımıda hata alırız.

Sebebi ise CORS Politikalarıdır.

Bunu aşmak için Server tarafına Studio'ya dönersek;

Startup.cs'de;

namespace SignalRServerExample
{
    public class Startup
    {
       
        public void ConfigureServices(IServiceCollection services)
        {
            //artık bu uygulamaya gelecek olan bütün isteklerin aşağıdaki şartlara uygun olmasını istemiş olduk.
            //Default CORS'umuzu belirttik.
            services.AddCors(options => options.AddDefaultPolicy(policy =>
                             policy.AllowAnyMethod()
                                   .AllowAnyHeader()
                                   .AllowCredentials()
                                   .SetIsOriginAllowed(origin => true)
            ));
            services.AddSignalR();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseCors(); //route'dan önce bir kontrol etsin.
            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
                //https://localhost:5001/myhub
                endpoints.MapHub<MyHub>("/myhub");
            });
        }
    }
}

ilgili değişikleri yapmamız gerekir. Bu backend'e hangi client'ların erişebileceğini belirlemiş olduk.
Artık tarayıcımız buradaki ayarlara göre hareket edecektir. 

index.html'i tekrardan çalıştırdığımız hataların kalktığını görürüz.

index.html'de yazdığımız ifade jquerry tarafından yakalacak açık olan connection üzerinden ilgili Hub'ın SendMessageAsync() fonksiyonuna gönderilecektir. string message ile yakalanan message, bu hub'a bağlanan bütün Client'lara gönderilecektir. (await Clients.All.SendAsync... ile)

---

SignalR'da Hub'dan Gönderilen Mesajları Client'da Yakalamak

index.html'de;

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- önce signalr sonra jquery eklenmelidir. -->
    <script src="signalr.min.js"></script>
    <script src="jquery.min.js"></script>

    <!-- signalr ile ilgili js kodlarımızı aşağıda yazacağız. -->
    <script>
        $(document).ready(() =>{
            const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://localhost:5001/myhub").build();
            connection.start();
            //artık aynı bağlantıyı kullanan bütün client'lara belirli mesaj gönderebiliriz.

            $("#btnGonder").click(() => {
                let message = $("#txtMessage").val();
                connection.invoke("SendMessageAsync", message).catch(error => console.log(`Mesaj gönderilirken hata oluştu. ${error}`));
            });

            //ile gelen mesajı burada yakalayabiliriz. ve yakalanan mesajı body'de div'e yazdırıp
			//bir alt satıra geçirebiliriz.
            connection.on("receiveMessage", message => {
                $("div").append(message + "<br>")
            });
            
        });
    </script>
</head>
<body>
    <input type="text" id="txtMessage">
    <button id="btnGonder">Gönder</button>

    <div></div>
</body>
</html>



